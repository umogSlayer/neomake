---
# Disabling building for AppVeyor. We are just testing things.
build: false
clone_depth: 10
branches:
  only:
    - master
skip_branch_with_pr: true

configuration:
  - VIM
  - NEOVIM

environment:
  PYTHON: "C:\\Python36-x64\\python"

# Cache the vim and vader directories between builds.
cache:
  - C:\vim -> .appveyor.yml
  - C:\projects\neomake\build\vim\plugins\vader -> .appveyor.yml

init:
  # Stop git from changing newlines
  - git config --global core.autocrlf input

install:
  # Download and unpack Vim
  - ps: >-
      if ($env:CONFIGURATION -eq 'VIM') {
        if (!(Test-Path -Path C:\vim)){
          Write-Host "Downloading Vim"
          Add-Type -A System.IO.Compression.FileSystem
          Invoke-WebRequest ftp://ftp.vim.org/pub/vim/pc/vim80-586w32.zip `
            -OutFile C:\vim.zip
          [IO.Compression.ZipFile]::ExtractToDirectory('C:\vim.zip', 'C:\vim')
          Invoke-WebRequest ftp://ftp.vim.org/pub/vim/pc/vim80-586rt.zip `
            -OutFile C:\rt.zip
          [IO.Compression.ZipFile]::ExtractToDirectory('C:\rt.zip', 'C:\vim')
        }
      }
  # Install Neovim
  - ps: >-
      if ($env:CONFIGURATION -eq 'NEOVIM') {
        if (!(Test-Path -Path C:\neovim)){
          Write-Host "Downloading Neovim"
          Add-Type -A System.IO.Compression.FileSystem
          Invoke-WebRequest https://github.com/neovim/neovim/releases/download/v0.3.1/nvim-win64.zip `
            -OutFile C:\neovim.zip
          [IO.Compression.ZipFile]::ExtractToDirectory('C:\neovim.zip', 'C:\neovim')
        }
      }
  # Install Neovim-dev
  - ps: >-
      if ($env:CONFIGURATION -eq 'NEOVIM-DEV') {
        if (!(Test-Path -Path C:\neovim-dev)){
          Add-Type -A System.IO.Compression.FileSystem
          Invoke-WebRequest https://github.com/neovim/neovim/releases/download/nightly/nvim-win64.zip `
            -OutFile C:\neovim.zip
          [IO.Compression.ZipFile]::ExtractToDirectory('C:\neovim.zip', 'C:\neovim-dev')
        }
      }
  # Clone Vader and check out the commit we want
  - ps: >-
      if (!(Test-Path -Path C:\projects\neomake\build\vim\plugins\vader)){
        git clone -q --depth=1 --branch=display-source-with-exceptions https://github.com/blueyed/vader.vim C:\projects\neomake\build\vim\plugins\vader
      }

  # # Install covimerage
  # - set PATH=C:\Users\appveyor\AppData\Roaming\Python\Python36\Scripts;%PATH%
  # - "%PYTHON% -m pip install --user covimerage"

test_script:
  - cd C:\projects\neomake
  - set NEOMAKE_TEST_NO_COLORSCHEME=1
  - ps: |
      $env:PATH = 'C:\msys64\usr\bin;' + $env:PATH
      echo $env:CONFIGURATION
      if ($env:CONFIGURATION -eq 'VIM') {
        $env:TEST_VIM = 'C:/vim/vim/vim80/vim.exe'
      } else {
        $env:TEST_VIM = 'C:/neovim/Neovim/bin/nvim.exe'
        set VADER_OUTPUT_FILE=CON

        Write-Host "Neovim: write 1"
        & C:/neovim/Neovim/bin/nvim.exe --headless -c "call writefile(['line1', 'line2'], 'CON')" -cq
        Write-Host "Neovim: write 2"
        & C:/neovim/Neovim/bin/nvim.exe --headless -c "call writefile([""line1"", ""line2""], ""CON"")" -cq
        Write-Host "Neovim: write 3"
        & C:/neovim/Neovim/bin/nvim.exe --headless -c "echom 1" -cq
        Write-Host "Neovim: write 4"
        & C:/neovim/Neovim/bin/nvim.exe --headless -c 'echom 1' -cq
        Write-Host "Neovim: write 5"
        & C:/neovim/Neovim/bin/nvim.exe --headless -c (echom 1) -cq
        Write-Host "Neovim: write 6"
        C:/neovim/Neovim/bin/nvim.exe --headless -c (echom 1) -cq
      }

      & $env:TEST_VIM --version
      & $env:TEST_VIM -Nu tests\vim\vimrc "+Vader! tests/test_windows.vader"

      & make test TEST_VIM=$env:TEST_VIM VADER_ARGS=tests/test_windows.vader 2>&1 | %{ "$_" }

      # make test_success
      # make test_success_with_stderr
      # & make test_success_with_stderr | %{ "$_" }
      # & make test_success_with_stderr 2>&1 | %{ "$_" }
      # make test_failure
      # & make test_failure | %{ "$_" }
      # Write-Host "test_failure with redirect"
      # & make test_failure 2>&1 | %{ "$_" }

      & make test TEST_VIM=$env:TEST_VIM VADER_ARGS=tests/main.vader 2>&1 | %{ "$_" }

      # Get-ChildItem "tests/*.vader" | Foreach-Object {
      #     if ($_.Name -ne "main.vader" -And $_.Name -ne "all.vader") {
      #         & echo $_.Name
      #         & make test TEST_VIM=$env:TEST_VIM VADER_ARGS="$_" 2>&1 | %{ "$_" }
      #         if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
      #     }
      # }

      Get-ChildItem "tests/isolated/*.vader" | Foreach-Object {
          & echo $_.Name
          & make test TEST_VIM=$env:TEST_VIM VADER_ARGS="$_" 2>&1 | %{ "$_" }
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
      }

on_success:
  - ps: |
      if ($true)
      {
        Write-Host "Success"
      }
